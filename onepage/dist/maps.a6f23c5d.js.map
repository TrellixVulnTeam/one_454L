{"version":3,"sources":["static/js/maps.js"],"names":["map","marker","response","json","userLoc","distance","mk1","mk2","miles","roundedMiles","newMapText","url","city","myLoc","lat","lng","apiKey","computeDistance","latitude","longitude","google","maps","LatLng","geometry","spherical","computeDistanceBetween","Math","round","materialiseMap","Map","document","getElementById","center","zoom","disableDefaultUI","styles","elementType","stylers","color","visibility","featureType","Marker","draggable","animation","Animation","DROP","position","window","ipLocation","$","ajax","data","JSON","stringify","type","contentType","success","location","distanceElement","querySelector","html","alert"],"mappings":";AAAA,IAAIA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACEC,EAAQ,CACZC,IAAK,WAAYC,KAAM,WAEnBC,EAAS,0CAEf,SAASC,EAAgBC,EAAUC,GAkB1BV,OAjBPL,EAAU,CACRU,IAAKI,EACLH,IAAKI,GAGPb,EAAM,IAAIc,OAAOC,KAAKC,OAAOlB,GAC7BG,EAAM,IAAIa,OAAOC,KAAKC,OAAOT,GAE7BR,EAAWe,OAAOC,KAAKE,SAASC,UAAUC,uBAAuBnB,EAAKC,GAMtEC,EAHa,cAGIH,EACjBI,EAAeiB,KAAKC,MAAc,IAARnB,GAAe,IAK3C,SAASoB,EAAexB,GACtBJ,EAAM,IAAIoB,OAAOC,KAAKQ,IAAIC,SAASC,eAAe,OAAQ,CACxDC,OAAQ5B,EACR6B,KAAM,EACNC,kBAAkB,EAClBC,OAAQ,CACN,CACEC,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEF,YAAa,cACbC,QAAS,CACP,CACEE,WAAY,SAIlB,CACEH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEF,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,6BACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,MACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,MACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,WACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,WACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,OACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,gBACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,eACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,eACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,aACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,eACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,kBACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,QACbJ,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEE,YAAa,QACbJ,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,gBAMjBrC,EAAS,IAAImB,OAAOC,KAAKoB,OAAO,CAC9BzC,IAAKA,EACL0C,WAAW,EACXC,UAAWvB,OAAOC,KAAKuB,UAAUC,KACjCC,SAAU1C,IAId2C,OAAOC,WAAa,WAClBC,EAAEC,KAAK,CACLvC,IAAK,2DAA6DK,EAClEmC,KAAMC,KAAKC,UAAU,CAAgB,WAAA,SACrCC,KAAM,OACNC,YAAa,mBACbC,QAAS,SAASL,GACbA,GAAAA,EAAKM,SAAU,CAEhB7B,EADc,IAAIR,OAAOC,KAAKC,OAAO6B,EAAKM,SAAS3C,IAAKqC,EAAKM,SAAS1C,MAGtEE,EAAgBkC,EAAKM,SAAS3C,IAAKqC,EAAKM,SAAS1C,KAC7C2C,IAAAA,EAAkB5B,SAAS6B,cAAc,oBAC7CV,EAAES,GAAiBE,KAAK,SAAWnD,EAAe,+BAGlDoD,MAAM","file":"maps.a6f23c5d.js","sourceRoot":"..","sourcesContent":["let map;\nlet marker;\nlet response;\nlet json;\nlet userLoc;\nlet distance;\nlet mk1;\nlet mk2;\nlet miles;\nlet roundedMiles;\nlet newMapText;\nlet url;\nlet city;\nconst myLoc = {\n  lat: 50.3887502, lng: -4.1281376,\n};\nconst apiKey = \"AIzaSyDNN0p5CJzhe0skik4v41UYCcTgmoiTFIk\";\n\nfunction computeDistance(latitude, longitude) {\n  userLoc = {\n    lat: latitude,\n    lng: longitude,\n  };\n\n  mk1 = new google.maps.LatLng(userLoc);\n  mk2 = new google.maps.LatLng(myLoc);\n\n  distance = google.maps.geometry.spherical.computeDistanceBetween(mk1, mk2);\n\n  function getMiles(i) {\n    return i * 0.000621371192;\n  }\n\n  miles = getMiles(distance);\n  roundedMiles = Math.round(miles * 100) / 100;\n\n  return roundedMiles\n}\n\nfunction materialiseMap(userLoc) {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: userLoc,\n    zoom: 6,\n    disableDefaultUI: true,\n    styles: [\n      {\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#f5f5f5\",\n          },\n        ],\n      },\n      {\n        elementType: \"labels.icon\",\n        stylers: [\n          {\n            visibility: \"off\",\n          },\n        ],\n      },\n      {\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#616161\",\n          },\n        ],\n      },\n      {\n        elementType: \"labels.text.stroke\",\n        stylers: [\n          {\n            color: \"#f5f5f5\",\n          },\n        ],\n      },\n      {\n        featureType: \"administrative.land_parcel\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#bdbdbd\",\n          },\n        ],\n      },\n      {\n        featureType: \"poi\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#eeeeee\",\n          },\n        ],\n      },\n      {\n        featureType: \"poi\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#757575\",\n          },\n        ],\n      },\n      {\n        featureType: \"poi.park\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#e5e5e5\",\n          },\n        ],\n      },\n      {\n        featureType: \"poi.park\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#9e9e9e\",\n          },\n        ],\n      },\n      {\n        featureType: \"road\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#ffffff\",\n          },\n        ],\n      },\n      {\n        featureType: \"road.arterial\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#757575\",\n          },\n        ],\n      },\n      {\n        featureType: \"road.highway\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#dadada\",\n          },\n        ],\n      },\n      {\n        featureType: \"road.highway\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#616161\",\n          },\n        ],\n      },\n      {\n        featureType: \"road.local\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#9e9e9e\",\n          },\n        ],\n      },\n      {\n        featureType: \"transit.line\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#e5e5e5\",\n          },\n        ],\n      },\n      {\n        featureType: \"transit.station\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#eeeeee\",\n          },\n        ],\n      },\n      {\n        featureType: \"water\",\n        elementType: \"geometry\",\n        stylers: [\n          {\n            color: \"#c9c9c9\",\n          },\n        ],\n      },\n      {\n        featureType: \"water\",\n        elementType: \"labels.text.fill\",\n        stylers: [\n          {\n            color: \"#9e9e9e\",\n          },\n        ],\n      },\n    ],\n  });\n  marker = new google.maps.Marker({\n    map: map,\n    draggable: false,\n    animation: google.maps.Animation.DROP,\n    position: userLoc,\n  });\n}\n\nwindow.ipLocation = function() {\n  $.ajax({\n    url: \"https://www.googleapis.com/geolocation/v1/geolocate?key=\" + apiKey,\n    data: JSON.stringify({ \"considerIp\": \"true\" }),\n    type: 'POST',\n    contentType: 'application/json',\n    success: function(data) {\n      if(data.location) {\n        let userLoc = new google.maps.LatLng(data.location.lat, data.location.lng);\n        materialiseMap(userLoc);\n\n        computeDistance(data.location.lat, data.location.lng);\n        let distanceElement = document.querySelector(\"#distanceElement\");\n        $(distanceElement).html(\"We're \" + roundedMiles + \" miles from each other\");\n\n      } else {\n        alert('not found');\n      }\n    }\n  });\n}\n"]}